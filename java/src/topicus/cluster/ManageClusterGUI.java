/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package topicus.cluster;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

import topicus.cluster.ManageCluster.FailedLaunchException;
import topicus.cluster.ManageCluster.InvalidInstanceTypeException;
import topicus.cluster.ManageCluster.InvalidNodeIdException;
import topicus.cluster.ManageCluster.ServerAlreadyRunningException;
import topicus.cluster.StartDialog.StartAction;

import com.amazonaws.services.ec2.model.Instance;

/**
 *
 * @author Dennis
 */
public class ManageClusterGUI extends javax.swing.JFrame {
	protected ManageCluster manager;
	
    /**
     * Creates new form ManageClusterGUI
     */
    public ManageClusterGUI(ManageCluster manager) {
    	this.manager = manager;
    	
        initComponents();
        
        this.setLocationRelativeTo(null);
        updateTable();
    }
    
    public synchronized void refreshInfo () {
    	printLine("Refreshing cluster information");
    	manager.updateClusterInfo(true);
    	printLine("New cluster information loaded");
    	    	
    	this.updateTable();
    }
    
    public void updateTable () {
    	printLine("Refreshing table");
    	
    	DefaultTableModel model = (DefaultTableModel) tableInstances.getModel();
    	   	
    	for (int i = model.getRowCount() - 1; i > -1; i--) {
    		model.removeRow(i);
    	}
    	
    	// add server
    	if (manager.isServerRunning()) {
    		this._addInstanceToTable("server",  manager.getServerInstance());
    	}
    	
    	// add nodes
    	Map<String, Instance> nodeList = manager.getNodes();
    	for (Map.Entry<String, Instance> entry : nodeList.entrySet()) {
    		this._addInstanceToTable(entry.getKey(), entry.getValue());
    	}    	
    	
    	// update stop all button
   		btnStopAll.setEnabled(model.getRowCount() > 0);
   		
   		// update start server button
   		btnStartServer.setEnabled(manager.isServerRunning() == false);
   		
   		btnUpdateHosts.setEnabled(model.getRowCount() > 0);
   		
   		printLine("Table refreshed");
    }
    
    protected void _addInstanceToTable (String name, Instance instance) {
    	DefaultTableModel model = (DefaultTableModel) tableInstances.getModel();
    	
    	String[] rowData = new String[5];
    	rowData[0] = name;
    	rowData[1] = instance.getState().getName();
    	rowData[2] = instance.getPublicIpAddress();
    	rowData[3] = instance.getInstanceType();
    	rowData[4] = instance.getLaunchTime().toString();
    	
    	model.addRow(rowData);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtConsole = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableInstances = new javax.swing.JTable();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        btnStopInstance = new javax.swing.JButton();
        btnStopAll = new javax.swing.JButton();
        btnStartNode = new javax.swing.JButton();
        btnStartServer = new javax.swing.JButton();
        btnUpdateHosts = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Manage Benchmark Cluster");
        setResizable(false);

        txtConsole.setEditable(false);
        txtConsole.setColumns(20);
        txtConsole.setRows(5);
        jScrollPane1.setViewportView(txtConsole);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Current cluster instances:");

        tableInstances.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Instance", "State", "IP", "Type", "Launch time"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tableInstances);
        tableInstances.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableInstances.getColumnModel().getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			public void valueChanged(ListSelectionEvent ev) {
				handleSelection(ev);				
			}
        });
        tableInstances.setColumnSelectionAllowed(false);
        tableInstances.setRowSelectionAllowed(true);
        tableInstances.getColumnModel().getColumn(0).setMaxWidth(60); // Name
        tableInstances.getColumnModel().getColumn(1).setMaxWidth(60); // State
        tableInstances.getColumnModel().getColumn(2).setMaxWidth(80); // IP
        tableInstances.getColumnModel().getColumn(3).setMaxWidth(60); // Type
        

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("Actions:");

        btnStopInstance.setText("Stop instance");
        btnStopInstance.setEnabled(false);
        btnStopInstance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopInstanceActionPerformed(evt);
            }
        });

        btnStopAll.setText("Stop all instances");
        btnStopAll.setEnabled(false);
        btnStopAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopAllActionPerformed(evt);
            }
        });

        btnStartNode.setText("Start node");
        btnStartNode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartNodeActionPerformed(evt);
            }
        });

        btnStartServer.setText("Start server");
        btnStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartServerActionPerformed(evt);
            }
        });

        btnUpdateHosts.setText("Update hosts file");
        btnUpdateHosts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateHostsActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setText("Console:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(jSeparator1)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnStopInstance)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnStopAll)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnRefresh)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 4, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(btnStartNode)
                    .addComponent(btnStartServer)
                    .addComponent(btnUpdateHosts)
                    .addComponent(btnExit))
                .addGap(0, 96, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator2)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnStopInstance)
                                    .addComponent(btnStopAll)
                                    .addComponent(btnRefresh)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStartNode)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnStartServer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateHosts)
                                .addGap(18, 18, 18)
                                .addComponent(btnExit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 185, Short.MAX_VALUE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>                        

    private void handleSelection(ListSelectionEvent evt) {
    	ListSelectionModel lsm = (ListSelectionModel) evt.getSource();
    	
    	if (evt.getValueIsAdjusting()) return;
    	
    	btnStopInstance.setEnabled(!lsm.isSelectionEmpty());
    }
    
    private void btnStartNodeActionPerformed(java.awt.event.ActionEvent evt) {                                             
        StartDialog startNode = new StartDialog();
        startNode.setModal(true);
        startNode.setLocationRelativeTo(this);
        startNode.setTitle("Start new node");
        startNode.setButtonText("Start new node");
        startNode.setDefaultType(manager.getDefaultNodeType());
        startNode.setStartAction(new StartNodeAction(this));
        
        startNode.setVisible(true);       
    }
    
    private void btnStartServerActionPerformed(java.awt.event.ActionEvent evt) {                                             
        StartDialog startServer = new StartDialog();
        startServer.setModal(true);
        startServer.setLocationRelativeTo(this);
        startServer.setTitle("Start benchmark server");
        startServer.setButtonText("Start server");
        startServer.setDefaultType(manager.getDefaultServerType());
        startServer.setStartAction(new StartServerAction(this));
        
        startServer.setVisible(true);       
    } 
    
    private void btnStopInstanceActionPerformed(java.awt.event.ActionEvent evt) {  
    	int selectIndex = tableInstances.getSelectedRow();
    	if (selectIndex == -1) return;
    	
    	DefaultTableModel model = (DefaultTableModel) tableInstances.getModel();
    	
    	String name = (String) model.getValueAt(selectIndex,  0);
    	
    	// determine if a node or the server should be stopped
    	if (name.indexOf("node") > -1) {
    		int nodeId = Integer.parseInt(name.substring(4));
    		
    		printLine("Stopping node #" + nodeId);
    		try {
				manager.stopNode(nodeId);
				printLine("Node stopped");
			} catch (InvalidNodeIdException e) {
				printLine("ERROR: invalid node id #" + nodeId + " specified!");
			}    		
    	} else {
    		printLine("Stopping benchmark server");
    		manager.stopServer();
    		printLine("Server stopped");
    	}
    	
    	refreshInfo();        
    } 
    
    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {                                        
        this.refreshInfo();
    } 
    
    private void btnStopAllActionPerformed(java.awt.event.ActionEvent evt) {                                        
        printLine("Stopping all cluster instances");
        
        manager.stopAll();
        
        printLine("All instances stopped");
        this.refreshInfo();        
    }  
    
    private void btnUpdateHostsActionPerformed(java.awt.event.ActionEvent evt) {  
    	Object[] options = {"Public IP's", "Private IP's"};
    	
    	int n = JOptionPane.showOptionDialog(
    			this,
    			"Do you want to use public IP addresses or private IP addresses?",
    			"Update hosts file",
    			JOptionPane.YES_NO_OPTION,
    			JOptionPane.QUESTION_MESSAGE,
    			null,
    			options,
    			options[0]
    	);
    	
    	boolean usePublic = (n == 0);    	
    	
        if (usePublic) {
        	printLine("Updating hosts file with public IP's");
        } else {
        	printLine("Updating hosts file with private IP's");
        }
        
        try {
			manager.updateHostsFile(usePublic);
		} catch (IOException e) {
			printLine("ERROR: unable to edit hosts file; " + e.getMessage());
		}
        
        printLine("Hosts file updated");     
    }  


    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {                                        
        System.exit(0);
    }      
    
    public void printLine(String msg) {
    	StringBuilder output = new StringBuilder();
		
		// build output message
		output.append("[");
		output.append(new SimpleDateFormat("HH:mm:ss:SS").format(Calendar.getInstance().getTime()));
		output.append("] ");		
		output.append(msg);
		
		output.append("\n");	
		
    	txtConsole.setText(txtConsole.getText() + output);
    }
    
    // Variables declaration - do not modify                     
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnStartNode;
    private javax.swing.JButton btnStartServer;
    private javax.swing.JButton btnStopAll;
    private javax.swing.JButton btnStopInstance;
    private javax.swing.JButton btnUpdateHosts;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tableInstances;
    private javax.swing.JTextArea txtConsole;
    // End of variables declaration  
    
    
    public class StartNodeAction implements StartAction {
    	protected ManageClusterGUI owner;
    	
    	public StartNodeAction(ManageClusterGUI owner) {
    		this.owner = owner;
    	}

		@Override
		public void start(String instanceType) {
			owner.printLine("Starting node with instance type `" + instanceType + "`");
			
			// start node
			try {
				owner.manager.startNode(instanceType);
				
				owner.printLine("Node started");	
				owner.refreshInfo();
			} catch (InvalidInstanceTypeException e) {
				owner.printLine("ERROR: Invalid type specified for new node!");
			} catch (FailedLaunchException e) {
				owner.printLine("ERROR: failed to launch new node!");
			}			
		}
    }
    
    public class StartServerAction implements StartAction {
    	protected ManageClusterGUI owner;
    	
    	public StartServerAction(ManageClusterGUI owner) {
    		this.owner = owner;
    	}

		@Override
		public void start(String instanceType) {
			owner.printLine("Starting benchmark server with instance type `" + instanceType + "`");
			
			// start node
			try {
				owner.manager.startServer(instanceType);
				
				owner.printLine("Server started");	
				owner.refreshInfo();
			} catch (InvalidInstanceTypeException e) {
				owner.printLine("ERROR: Invalid type specified for benchmark srever!");
			} catch (FailedLaunchException e) {
				owner.printLine("ERROR: failed to launch benchmark server!");
			} catch (ServerAlreadyRunningException e) {
				owner.printLine("ERROR: benchmark server is already running!");
			}			
		}
    }
    
    
}
