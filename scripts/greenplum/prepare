#!/bin/bash

# Prepares a node for Greenplym Database
#
# Created by Dennis Palletts for Topicus I&I as part of an internship assignment.
# The script needs admin rights
if [ `/usr/bin/id -u` -ne 0 ]; then
    echo "Run as sudo / root"
    exit 1
fi

MAX_OPEN_FILES=65536
MAX_FSIZE='unlimited'
IP=`ifconfig | grep -zoP '(?s)eth0.*?inet addr:.*?\s' | grep -oP '(\d{1,3}\.){3}\d{1,3}'`
HOSTNAME=`/bin/hostname`
COLS=80 # The built-in variable $COLUMNS does not work, so just use width 80

# Prints a description, runs command(s) and prints a confirmation
# Note it cannot actually handle failures. Consider that a TODO =)
run() {
    echo -ne "$2"
    eval $1
    let "space = $COLS - ${#2}"
    printf "%${space}s\n" "[ OK ]"
}

# Installs whatever package is given as argument, if it is not installed yet
install() {
    [ -z "`dpkg --get-selections | grep \"^$1\s\+install$\"`" ] && apt-get -y install $1 > /dev/null
}

fake_redhat () {
	if [ ! -f "/etc/redhat-release" ]; then
		echo "Trick for install Greenplum 4" > /etc/redhat-release
	fi
}

create_account() {
	if [ ! -d "/home/gpadmin" ]; then
		useradd --create-home --shell "/bin/bash" gpadmin -p test
		cp /etc/ssh/ssh_host_rsa_key /home/gpadmin/
		chown gpadmin:gpadmin /home/gpadmin/ssh_host_rsa_key
		echo "source /usr/local/greenplum-db/greenplum_path.sh" >> /home/gpadmin/.bashrc
		echo "export MASTER_DATA_DIRECTORY=/mnt/data/master/gpsne-1" >> /home/gpadmin/.bashrc
	fi
}

enable_pam_limits () {
	FILE=/etc/pam.d/su
	if grep -q "#added session" "$FILE"
	then
		echo -n ""
	else
		echo "#added session" >> "$FILE"
		echo "session required pam_limits.so" >> "$FILE"
	fi
}

set_kernel_setting() {
	VAR=$1
	VALUE=$2
	FILE="/etc/sysctl.conf"

	sysctl -wqe "$1"="$2"

	if grep -q "#added $1" "$FILE"
	then
		echo -n ""
	else
		echo "#added $1" >> "$FILE"
		echo "$1 = $2" >> "$FILE"
		echo "" >> "$FILE"
	fi
}

set_kernel_settings () {
	set_kernel_setting "xfs_mount_options" "rw,noatime,inode64,allocsize=16m"
	set_kernel_setting "kernel.shmmax" "500000000"
	
	set_kernel_setting "kernel.shmmax" "500000000"
	set_kernel_setting "kernel.shmmni" "4096"
	set_kernel_setting "kernel.shmall" "4000000000"
	set_kernel_setting "kernel.sem" "250 512000 100 2048"
	set_kernel_setting "kernel.sysrq" "1"
	set_kernel_setting "kernel.core_uses_pid" "1"
	set_kernel_setting "kernel.msgmnb" "65536"
	set_kernel_setting "kernel.msgmax" "65536"
	set_kernel_setting "kernel.msgmni" "2048"
	set_kernel_setting "net.ipv4.tcp_syncookies" "1"
	set_kernel_setting "net.ipv4.ip_forward" "0"
	set_kernel_setting "net.ipv4.conf.default.accept_source_route" "0"
	set_kernel_setting "net.ipv4.tcp_tw_recycle" "1"
	set_kernel_setting "net.ipv4.tcp_max_syn_backlo" "4096"
	set_kernel_setting "net.ipv4.conf.all.arp_filte" "1"
	set_kernel_setting "net.ipv4.ip_local_port_range" "1025 65535"
	set_kernel_setting "net.core.netdev_max_backlog" "10000"
	set_kernel_setting "vm.overcommit_memory" "2"
}

set_security_limits () {
	FILE="/etc/security/limits.conf"

	if grep -q "#added limits" "$FILE"
	then
		echo -n ""
	else 
		echo "#added limits" >> "$FILE"
		echo "* soft nofile 65536" >> "$FILE"
		echo "* hard nofile 65536" >> "$FILE"
		echo "* soft nproc 131072" >> "$FILE"
		echo "* hard nproc 131072" >> "$FILE"
	fi
}

setup_libnuma() {
    install 'libnuma1'
}

create_dirs () {
	mkdir -p "/mnt/data"
	mkdir -p "/mnt/data/master"
	mkdir -p "/mnt/data/seg1"
	mkdir -p "/mnt/data/seg2"
	mkdir -p "/mnt/data/seg3"
	mkdir -p "/mnt/data/seg4"

	chown -R gpadmin:gpadmin /mnt/data
}


run fake_redhat		'Faking RedHat release'
run setup_libnuma	'Installing libnuma library'
run enable_pam_limits	'Enabling PAM limits to /etc/pam.d/su'
run set_kernel_settings	'Setting kernel settings'
run set_security_limits	'Setting security limits'
run create_account	'Creating gpadmin account'
run create_dirs		'Creating data directories'

echo ""
echo "All finished!"
